// generated by Fast Light User Interface Designer (fluid) version 1.0308

#ifndef ObjectEditor_h
#define ObjectEditor_h
#include <FL/Fl.H>
class ChildWindow;
#include "parameters.h"
class MandelPreview;
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Scrollbar.H>
#include <FL/Fl_Button.H>

class ObjectEditor : public Fl_Group {
public:
  ObjectEditor(int X, int Y, int W, int H, const char *label) ;
  ChildWindow *win;
  Fl_Value_Input *maxiter;
private:
  inline void cb_maxiter_i(Fl_Value_Input*, void*);
  static void cb_maxiter(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *lvalue;
private:
  inline void cb_lvalue_i(Fl_Value_Input*, void*);
  static void cb_lvalue(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *bailout;
private:
  inline void cb_bailout_i(Fl_Value_Input*, void*);
  static void cb_bailout(Fl_Value_Input*, void*);
public:
  Fl_Choice *formula;
private:
  inline void cb_formula_i(Fl_Choice*, void*);
  static void cb_formula(Fl_Choice*, void*);
  static Fl_Menu_Item menu_formula[];
public:
  Fl_Value_Input *cre;
private:
  inline void cb_cre_i(Fl_Value_Input*, void*);
  static void cb_cre(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *ci;
private:
  inline void cb_ci_i(Fl_Value_Input*, void*);
  static void cb_ci(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *cj;
private:
  inline void cb_cj_i(Fl_Value_Input*, void*);
  static void cb_cj(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *ck;
private:
  inline void cb_ck_i(Fl_Value_Input*, void*);
  static void cb_ck(Fl_Value_Input*, void*);
public:
  Fl_Group *paramgroup;
  Fl_Scrollbar *paramscroll;
private:
  inline void cb_up_i(Fl_Button*, void*);
  static void cb_up(Fl_Button*, void*);
  inline void cb__i(Fl_Button*, void*);
  static void cb_(Fl_Button*, void*);
  inline void cb_1_i(Fl_Button*, void*);
  static void cb_1(Fl_Button*, void*);
  inline void cb_2_i(Fl_Button*, void*);
  static void cb_2(Fl_Button*, void*);
  inline void cb_3_i(Fl_Button*, void*);
  static void cb_3(Fl_Button*, void*);
  inline void cb_down_i(Fl_Button*, void*);
  static void cb_down(Fl_Button*, void*);
public:
  Fl_Button *redraw;
private:
  inline void cb_redraw_i(Fl_Button*, void*);
  static void cb_redraw(Fl_Button*, void*);
public:
  MandelPreview *MP;
  Fl_Group *paramgroup2;
  Fl_Value_Input *p_re;
private:
  inline void cb_p_re_i(Fl_Value_Input*, void*);
  static void cb_p_re(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *p_i;
private:
  inline void cb_p_i_i(Fl_Value_Input*, void*);
  static void cb_p_i(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *p_j;
private:
  inline void cb_p_j_i(Fl_Value_Input*, void*);
  static void cb_p_j(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *p_k;
private:
  inline void cb_p_k_i(Fl_Value_Input*, void*);
  static void cb_p_k(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *maxOrbit;
private:
  inline void cb_maxOrbit_i(Fl_Value_Input*, long);
  static void cb_maxOrbit(Fl_Value_Input*, long);
public:
  void set(const FractalSpec& f);
  void get(FractalSpec& f);
  void formula_changed();
  void paramscroll_changed();
private:
  FractalSpec frac; 
public:
  void deactiv();
};
#endif
