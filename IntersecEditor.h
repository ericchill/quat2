// generated by Fast Light User Interface Designer (fluid) version 1.0108

#ifndef IntersecEditor_h
#define IntersecEditor_h
#include <FL/Fl.H>
class ChildWindow;
#include <FL/Fl_Scrollbar.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Value_Output.H>

#include "parameters.h"

class IntersecEditor : public Fl_Group {
public:
    IntersecEditor(int X, int Y, int W, int H, const char* label);
    ChildWindow* win;
    Fl_Scrollbar* scroll;
private:
    void cb_scroll_i(Fl_Scrollbar*, void*);
    static void cb_scroll(Fl_Scrollbar*, void*);
public:
    Fl_Group* qspacebox;
    Fl_Group* n;
    Fl_Value_Input* nre;
private:
    void cb_nre_i(Fl_Value_Input*, void*);
    static void cb_nre(Fl_Value_Input*, void*);
public:
    Fl_Value_Input* ni;
private:
    void cb_ni_i(Fl_Value_Input*, void*);
    static void cb_ni(Fl_Value_Input*, void*);
public:
    Fl_Value_Input* nj;
private:
    void cb_nj_i(Fl_Value_Input*, void*);
    static void cb_nj(Fl_Value_Input*, void*);
public:
    Fl_Group* p;
    Fl_Value_Input* pre;
private:
    void cb_pre_i(Fl_Value_Input*, void*);
    static void cb_pre(Fl_Value_Input*, void*);
public:
    Fl_Value_Input* pi;
private:
    void cb_pi_i(Fl_Value_Input*, void*);
    static void cb_pi(Fl_Value_Input*, void*);
public:
    Fl_Value_Input* pj;
private:
    void cb_pj_i(Fl_Value_Input*, void*);
    static void cb_pj(Fl_Value_Input*, void*);
public:
    Fl_Button* add;
private:
    void cb_add_i(Fl_Button*, void*);
    static void cb_add(Fl_Button*, void*);
public:
    Fl_Button* del;
private:
    void cb_del_i(Fl_Button*, void*);
    static void cb_del(Fl_Button*, void*);
public:
    Fl_Box* note;
    Fl_Value_Output* planeno;
private:
    void cb_To_i(Fl_Button*, void*);
    static void cb_To(Fl_Button*, void*);
    CutSpec _cuts;
    FractalView* _view;
public:
    void setCuts(const CutSpec& buf);
    void setView(FractalView* view);
    void get(CutSpec& buf);
    void setno(size_t no);
    void checkValidity();
private:
    size_t _num, _idx;
    Vec3 _curNormal, _curPoint;
    void showVectors();
public:
    void deactiv();
private:
    bool _disabled;
};
#endif
