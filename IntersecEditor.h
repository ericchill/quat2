// generated by Fast Light User Interface Designer (fluid) version 1.0308

#ifndef IntersecEditor_h
#define IntersecEditor_h
class ChildWindow;
#include "parameters.h"
#pragma warning(push, 0)
#include <FL/Fl.H>
#include <FL/Fl_Scrollbar.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Value_Output.H>
#pragma warning(pop)

class IntersecEditor : public Fl_Group {
public:
  IntersecEditor(int X, int Y, int W, int H, const char *label) ;
  ChildWindow *win;
  Fl_Scrollbar *scroll;
private:
  inline void cb_scroll_i(Fl_Scrollbar*, void*);
  static void cb_scroll(Fl_Scrollbar*, void*);
public:
  Fl_Group *qspacebox;
  Fl_Group *n;
  Fl_Value_Input *nre;
private:
  inline void cb_nre_i(Fl_Value_Input*, void*);
  static void cb_nre(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *ni;
private:
  inline void cb_ni_i(Fl_Value_Input*, void*);
  static void cb_ni(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *nj;
private:
  inline void cb_nj_i(Fl_Value_Input*, void*);
  static void cb_nj(Fl_Value_Input*, void*);
public:
  Fl_Group *p;
  Fl_Value_Input *pre;
private:
  inline void cb_pre_i(Fl_Value_Input*, void*);
  static void cb_pre(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *pi;
private:
  inline void cb_pi_i(Fl_Value_Input*, void*);
  static void cb_pi(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *pj;
private:
  inline void cb_pj_i(Fl_Value_Input*, void*);
  static void cb_pj(Fl_Value_Input*, void*);
public:
  Fl_Button *add;
private:
  inline void cb_add_i(Fl_Button*, void*);
  static void cb_add(Fl_Button*, void*);
public:
  Fl_Button *del;
private:
  inline void cb_del_i(Fl_Button*, void*);
  static void cb_del(Fl_Button*, void*);
public:
  Fl_Box *note;
  Fl_Value_Output *planeno;
private:
  inline void cb_To_i(Fl_Button*, void*);
  static void cb_To(Fl_Button*, void*);
public:
  void set(const CutSpec& cuts, const FractalView& view);
  void get(CutSpec& cuts);
  void setIndex(size_t idx);
  size_t _idx; 
private:
  Vec3 _curNormal; 
  Vec3 _curPoint; 
  CutSpec _cuts; 
  FractalView _view; 
  void showVectors();
  bool _disabled; 
public:
  void deactiv();
  void checkValidity();
  void setView(const FractalView& view);
};
#endif
