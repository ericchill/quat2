# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cpp}
decl {// Quat - A 3D fractal generation program
// Copyright (C) 1997-2000 Dirk Meyer
// (email: dirk.meyer@studserv.uni-stuttgart.de)
// mail:  Dirk Meyer
//        Marbacher Weg 29
//        D-71334 Waiblingen
//        Germany
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.} {private local
}

decl {\#include "ChildWindow.h"} {private local
}

decl {class ChildWindow;} {public local
}

decl {\#include "parameters.h"} {public local
}

class IntersecEditor {open : {public Fl_Group}
} {
  Function {IntersecEditor(int X, int Y, int W, int H, const char *label) : Fl_Group(X,Y,W,H,label), _idx(0), _disabled(false)} {open
  } {
    Fl_Window win {open
      xywh {384 373 415 215} type Double
      class ChildWindow noborder visible
    } {
      Fl_Scrollbar scroll {
        label {Plane to edit}
        callback {setIndex(o->value());}
        tooltip {Select the intersection plane to edit.} xywh {10 20 20 150} labelsize 12 align 5
        code1 {scroll->linesize(1);
            scroll->value(0, 1, 0, 0);}
      }
      Fl_Group qspacebox {
        label {QSpace coordinates}
        tooltip {All parameters in this box are measured in QSpace coordinates.} xywh {120 5 270 115} box EMBOSSED_BOX labelsize 12 align 21
      } {}
      Fl_Group n {open
        tooltip {Normal vector = stands perpendicular on the intersection plane.} xywh {130 25 110 75} labeltype NO_LABEL
      } {
        Fl_Value_Input nre {
          label {Normal Vector}
          callback {_curNormal[0] = o->value();
_cuts.setPlane(_idx, _curNormal, _curPoint);
checkValidity();}
          tooltip {Real part.} xywh {130 40 110 20} labelsize 12 align 5 minimum -1e+20 maximum 1e+20 textsize 12
        }
        Fl_Value_Input ni {
          label {value:}
          callback {_curNormal[1] = o->value();
_cuts.setPlane(_idx, _curNormal, _curPoint);
checkValidity();}
          tooltip {1st imaginary (i) part.} xywh {130 60 110 20} labeltype NO_LABEL labelsize 12 minimum -1e+20 maximum 1e+20 textsize 12
        }
        Fl_Value_Input nj {
          label {value:}
          callback {_curNormal[2] = o->value();
_cuts.setPlane(_idx, _curNormal, _curPoint);
checkValidity();}
          tooltip {2nd imaginary (j) part.} xywh {130 80 110 20} labeltype NO_LABEL labelsize 12 minimum -1e+20 maximum 1e+20 textsize 12
        }
      }
      Fl_Group p {
        tooltip {Any point that lies on the desired plane.} xywh {270 25 110 75} labeltype NO_LABEL
      } {
        Fl_Value_Input pre {
          label {Point to fix plane}
          callback {_curPoint[0] = o->value();
            _cuts.setPlane(_idx, _curNormal, _curPoint);}
          tooltip {Real part.} xywh {270 40 110 20} labelsize 12 align 5 minimum -1e+20 maximum 1e+20 textsize 12
        }
        Fl_Value_Input pi {
          label {value:}
          callback {_curPoint[1] = o->value();
            _cuts.setPlane(_idx, _curNormal, _curPoint);}
          tooltip {1st imaginary (i) part.} xywh {270 60 110 20} labeltype NO_LABEL labelsize 12 minimum -1e+20 maximum 1e+20 textsize 12
        }
        Fl_Value_Input pj {
          label {value:}
          callback {_curPoint[2] = o->value();
            _cuts.setPlane(_idx, _curNormal, _curPoint);}
          tooltip {2nd imaginary (j) part.} xywh {270 80 110 20} labeltype NO_LABEL labelsize 12 minimum -1e+20 maximum 1e+20 textsize 12
        }
      }
      Fl_Button add {
        label Add
        callback {_cuts.addPlane(_curNormal, _curPoint);
scroll->value(static_cast<int>(_cuts.count()) - 1, 1, 0, static_cast<int>(_cuts.count()));
setIndex(_cuts.count() - 1);}
        tooltip {Add a new intersection plane.} xywh {50 60 60 20} labelsize 12
      }
      Fl_Button del {
        label Delete
        callback {_cuts.deletePlane(_idx);
if (_idx >= _cuts.count() && _idx != 0) {
    _idx = _cuts.count() - 1;
}
scroll->value(static_cast<int>(_idx), 1, 0, static_cast<int>(_cuts.count()));
setIndex(_idx);}
        tooltip {Delete the current plane.} xywh {50 80 60 20} labelsize 12
      }
      Fl_Box note {
        label {The Normal Vector points to half-space
in which the object will disappear.}
        xywh {130 130 230 50} labelsize 12 align 20
      }
      Fl_Value_Output planeno {
        xywh {50 20 30 20} labeltype NO_LABEL
      }
      Fl_Button {} {
        label {To View}
        callback {_curNormal = (_view._s - _curPoint).normalized();
_cuts.setPlane(_idx, _curNormal, _curPoint);
showVectors();
checkValidity();}
        tooltip {Aim vector at viewpoint} xywh {50 120 64 20}
      }
    }
    code {end(); // VERY IMPORTANT!
        win->position(X+2, Y+2);
        // DON'T delete win in destructor (or elsewhere) 
        // it's automatically deleted by Fl_Group} {}
  }
  Function {set(const CutSpec& cuts, const FractalView& view)} {open return_type void
  } {
    code {_cuts = cuts;
_view = view;
_cuts.getPlane(_idx, _curNormal, _curPoint);
setIndex(0);
checkValidity();} {}
  }
  Function {get(CutSpec& cuts)} {return_type void
  } {
    code {cuts = _cuts;} {}
  }
  Function {setIndex(size_t idx)} {open selected return_type void
  } {
    code {if (idx < _cuts.count() || _cuts.count() != 0) {
    _idx = idx;
    _cuts.getPlane(_idx, _curNormal, _curPoint);
    showVectors();
    checkValidity();
}} {}
  }
  decl {size_t _idx;} {public global
  }
  decl {Vec3 _curNormal;} {private local
  }
  decl {Vec3 _curPoint;} {private local
  }
  decl {CutSpec _cuts;} {private local
  }
  decl {FractalView _view;} {private local
  }
  Function {showVectors()} {open private return_type void
  } {
    code {nre->value(_curNormal[0]);
    ni->value(_curNormal[1]);
    nj->value(_curNormal[2]);
    pre->value(_curPoint[0]);
    pi->value(_curPoint[1]);
    pj->value(_curPoint[2]);
    planeno->value(static_cast<int>(_idx) + 1);} {}
  }
  decl {bool _disabled;} {private local
  }
  Function {deactiv()} {return_type void
  } {
    code {n->deactivate();
        p->deactivate();
        add->deactivate();
        del->deactivate();
        _disabled = true;} {}
  }
  Function {checkValidity()} {open return_type void
  } {
    code {constexpr Fl_Color okc = FL_WHITE;
constexpr Fl_Color ndefc = FL_RED;
Fl_Color nre_c = okc, ni_c = okc, nj_c = okc;

if (nre->value() == 0.0 && ni->value() == 0.0 && nj->value() == 0.0) {
    nre_c = ndefc; ni_c = ndefc; nj_c = ndefc;
}
if (nre->color() != nre_c) { 
    nre->color(nre_c);
    nre->redraw();
}
if (ni->color() != ni_c) {
    ni->color(ni_c);
    ni->redraw();
}
if (nj->color() != nj_c) {
    nj->color(nj_c); 
    nj->redraw();
}

if (_cuts.count() == 0 && scroll->active()) {
    qspacebox->hide();
    n->hide(); 
    p->hide();
    note->hide();
    planeno->hide();
    scroll->deactivate();
    del->deactivate();
}
if (_cuts.count() != 0 && !scroll->active()) {
    qspacebox->show();
    n->show(); 
    p->show();
    note->show();
    planeno->show();
    scroll->activate();
}

if (_cuts.count() == 0 && del->active()) {
    del->deactivate();
}
if (_cuts.count() != 0 && !del->active() && !_disabled) {
    del->activate();
}
scroll->value(static_cast<int>(_idx+1), 1, 0, static_cast<int>(_cuts.count()));} {}
  }
  Function {setView(const FractalView& view)} {open return_type void
  } {
    code {_view = view;} {}
  }
}
