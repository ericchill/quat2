// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "OtherEditor.h"
// Quat - A 3D fractal generation program
// Copyright (C) 1997-2000 Dirk Meyer
// (email: dirk.meyer@studserv.uni-stuttgart.de)
// mail:  Dirk Meyer
//        Marbacher Weg 29
//        D-71334 Waiblingen
//        Germany
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#include "CReplacements.h"
//#include <cstring>
#include "ChildWindow.h"
#include "ViewSelector.h"

void OtherEditor::cb_xres_i(Fl_Value_Input* o, void*) {
  _view._xres = static_cast<int>(o->value());
for (int i=0; i<3; i++) {
    _vs[i]->xres(_view._xres);
}
checkValidity();
}
void OtherEditor::cb_xres(Fl_Value_Input* o, void* v) {
  ((OtherEditor*)(o->parent()->parent()->user_data()))->cb_xres_i(o,v);
}

void OtherEditor::cb_yres_i(Fl_Value_Input* o, void*) {
  _view._yres = static_cast<int>(o->value());
for (int i=0; i<3; i++) {
    _vs[i]->yres(_view._yres);
}
checkValidity();
}
void OtherEditor::cb_yres(Fl_Value_Input* o, void* v) {
  ((OtherEditor*)(o->parent()->parent()->user_data()))->cb_yres_i(o,v);
}

void OtherEditor::cb_zres_i(Fl_Value_Input* o, void*) {
  _view._zres = static_cast<int>(o->value());
checkValidity();
}
void OtherEditor::cb_zres(Fl_Value_Input* o, void* v) {
  ((OtherEditor*)(o->parent()->parent()->user_data()))->cb_zres_i(o,v);
}

void OtherEditor::cb_phongmax_i(Fl_Value_Input* o, void*) {
  _view._phongmax = o->value();
checkValidity();
}
void OtherEditor::cb_phongmax(Fl_Value_Input* o, void* v) {
  ((OtherEditor*)(o->parent()->user_data()))->cb_phongmax_i(o,v);
}

void OtherEditor::cb_phongsharp_i(Fl_Value_Input* o, void*) {
  _view._phongsharp = o->value();
checkValidity();
}
void OtherEditor::cb_phongsharp(Fl_Value_Input* o, void* v) {
  ((OtherEditor*)(o->parent()->user_data()))->cb_phongsharp_i(o,v);
}

void OtherEditor::cb_ambient_i(Fl_Value_Input* o, void*) {
  _view._ambient = o->value();
checkValidity();
}
void OtherEditor::cb_ambient(Fl_Value_Input* o, void* v) {
  ((OtherEditor*)(o->parent()->user_data()))->cb_ambient_i(o,v);
}

void OtherEditor::cb_antialiasing_i(Fl_Value_Input* o, void*) {
  _view._antialiasing = static_cast<int>(o->value());
checkValidity();
}
void OtherEditor::cb_antialiasing(Fl_Value_Input* o, void* v) {
  ((OtherEditor*)(o->parent()->user_data()))->cb_antialiasing_i(o,v);
}

void OtherEditor::cb_res1_i(Fl_Button*, void*) {
  xres->value(1170); yres->value(828);
xres->do_callback(); yres->do_callback();
}
void OtherEditor::cb_res1(Fl_Button* o, void* v) {
  ((OtherEditor*)(o->parent()->parent()->user_data()))->cb_res1_i(o,v);
}

void OtherEditor::cb_res1b_i(Fl_Button*, void*) {
  xres->value(3511); yres->value(2483);
xres->do_callback(); yres->do_callback();
}
void OtherEditor::cb_res1b(Fl_Button* o, void* v) {
  ((OtherEditor*)(o->parent()->parent()->user_data()))->cb_res1b_i(o,v);
}

void OtherEditor::cb_res2_i(Fl_Button*, void*) {
  xres->value(640);
yres->value(480);
zres->value(480);
xres->do_callback();
yres->do_callback();
zres->do_callback();
}
void OtherEditor::cb_res2(Fl_Button* o, void* v) {
  ((OtherEditor*)(o->parent()->parent()->user_data()))->cb_res2_i(o,v);
}

void OtherEditor::cb_res3_i(Fl_Button*, void*) {
  xres->value(1000);
yres->value(800);
zres->value(800);
xres->do_callback();
yres->do_callback();
zres->do_callback();
}
void OtherEditor::cb_res3(Fl_Button* o, void* v) {
  ((OtherEditor*)(o->parent()->parent()->user_data()))->cb_res3_i(o,v);
}

void OtherEditor::cb_res4_i(Fl_Button*, void*) {
  xres->value(1920);
yres->value(1080);
zres->value(1080);
xres->do_callback();
yres->do_callback();
zres->do_callback();
}
void OtherEditor::cb_res4(Fl_Button* o, void* v) {
  ((OtherEditor*)(o->parent()->parent()->user_data()))->cb_res4_i(o,v);
}

OtherEditor::OtherEditor(int X, int Y, int W, int H, const char *label) : Fl_Group(X,Y,W,H,label) {
  { win = new ChildWindow(415, 215);
    win->box(FL_FLAT_BOX);
    win->color(FL_BACKGROUND_COLOR);
    win->selection_color(FL_BACKGROUND_COLOR);
    win->labeltype(FL_NO_LABEL);
    win->labelfont(0);
    win->labelsize(14);
    win->labelcolor(FL_FOREGROUND_COLOR);
    win->user_data((void*)(this));
    win->align(Fl_Align(FL_ALIGN_TOP));
    win->when(FL_WHEN_RELEASE);
    { Fl_Box* o = new Fl_Box(10, 5, 330, 70, "Image Resolution");
      o->box(FL_ENGRAVED_FRAME);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { group_res = new Fl_Group(10, 5, 330, 70);
      { xres = new Fl_Value_Input(20, 40, 90, 20, "X Resolution");
        xres->tooltip("Horizontal size of the image.");
        xres->labelsize(12);
        xres->minimum(1);
        xres->maximum(32767);
        xres->step(1);
        xres->textsize(12);
        xres->callback((Fl_Callback*)cb_xres);
        xres->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Value_Input* xres
      { yres = new Fl_Value_Input(130, 40, 90, 20, "Y Resolution");
        yres->tooltip("Vertical size of the image.");
        yres->labelsize(12);
        yres->minimum(1);
        yres->maximum(32767);
        yres->step(1);
        yres->textsize(12);
        yres->callback((Fl_Callback*)cb_yres);
        yres->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Value_Input* yres
      { zres = new Fl_Value_Input(240, 40, 90, 20, "Z Resolution");
        zres->tooltip("Describes how exact the object is scanned.");
        zres->labelsize(12);
        zres->minimum(1);
        zres->maximum(32767);
        zres->step(1);
        zres->textsize(12);
        zres->callback((Fl_Callback*)cb_zres);
        zres->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Value_Input* zres
      group_res->end();
    } // Fl_Group* group_res
    { Fl_Box* o = new Fl_Box(10, 85, 240, 70, "Phong Highlight");
      o->box(FL_ENGRAVED_FRAME);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { phongmax = new Fl_Value_Input(20, 125, 100, 20, "max.");
      phongmax->tooltip("Maximum brightness of the highlight.");
      phongmax->labelsize(12);
      phongmax->textsize(12);
      phongmax->callback((Fl_Callback*)cb_phongmax);
      phongmax->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Value_Input* phongmax
    { phongsharp = new Fl_Value_Input(140, 125, 100, 20, "sharp");
      phongsharp->tooltip("Describes how fast the highlight will fade into usual light.");
      phongsharp->labelsize(12);
      phongsharp->maximum(1e+20);
      phongsharp->textsize(12);
      phongsharp->callback((Fl_Callback*)cb_phongsharp);
      phongsharp->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Value_Input* phongsharp
    { ambient = new Fl_Value_Input(20, 180, 100, 20, "Ambient Light");
      ambient->tooltip("The brightness that is even in shadowed parts of the object.");
      ambient->labelsize(12);
      ambient->maximum(1e+20);
      ambient->textsize(12);
      ambient->callback((Fl_Callback*)cb_ambient);
      ambient->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Value_Input* ambient
    { antialiasing = new Fl_Value_Input(140, 180, 90, 20, "Antialiasing");
      antialiasing->tooltip("Subdivide pixels n*n times. Higher values result in smoother\nimages and long\
er calculation time.");
      antialiasing->labelsize(12);
      antialiasing->minimum(1);
      antialiasing->maximum(5);
      antialiasing->step(1);
      antialiasing->value(1);
      antialiasing->textsize(12);
      antialiasing->callback((Fl_Callback*)cb_antialiasing);
      antialiasing->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Value_Input* antialiasing
    { Fl_Box* o = new Fl_Box(280, 85, 120, 20, "Resolution shortcuts");
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { group_buttons = new Fl_Group(280, 85, 110, 115);
      group_buttons->tooltip("Clicking on one of those buttons will set a predefined resolution.");
      { res1 = new Fl_Button(280, 100, 110, 20, "DIN A4 (100 dpi)");
        res1->tooltip("A whole sheet of paper printed in 100 dpi.");
        res1->labelsize(12);
        res1->callback((Fl_Callback*)cb_res1);
      } // Fl_Button* res1
      { res1b = new Fl_Button(280, 120, 110, 20, "DIN A4 (300 dpi)");
        res1b->tooltip("A whole sheet of paper printed in 300 dpi.");
        res1b->labelsize(12);
        res1b->callback((Fl_Callback*)cb_res1b);
      } // Fl_Button* res1b
      { res2 = new Fl_Button(280, 140, 110, 20, "640x480x480");
        res2->tooltip("A small image for testing.");
        res2->labelsize(12);
        res2->callback((Fl_Callback*)cb_res2);
      } // Fl_Button* res2
      { res3 = new Fl_Button(280, 160, 110, 20, "1000x800x800");
        res3->tooltip("Medium sized image.");
        res3->labelsize(12);
        res3->callback((Fl_Callback*)cb_res3);
      } // Fl_Button* res3
      { res4 = new Fl_Button(280, 180, 110, 20, "1920x1080x1080");
        res4->tooltip("Common resolution.");
        res4->labelsize(12);
        res4->callback((Fl_Callback*)cb_res4);
      } // Fl_Button* res4
      group_buttons->end();
    } // Fl_Group* group_buttons
    win->clear_border();
    win->end();
  } // ChildWindow* win
  //memset(&view, 0, sizeof(view));
  end(); // VERY IMPORTANT!
  win->position(X+2, Y+2);
  // DON'T delete win in destructor (or elsewhere) 
  // it's automatically deleted by Fl_Group
}

void OtherEditor::setSelectors(ViewSelector *vsa, ViewSelector *vsb, ViewSelector *vsf) {
  _vs[0] = vsa;
  _vs[1] = vsb;
  _vs[2] = vsf;
}

void OtherEditor::set(const FractalView& v) {
  for (int i=0; i<3; i++) assert(_vs[i] != 0);
  _view = v;
  xres->value(v._xres);
  yres->value(v._yres);
  zres->value(v._zres);
  phongmax->value(v._phongmax);
  phongsharp->value(v._phongsharp);
  ambient->value(v._ambient);
  antialiasing->value(v._antialiasing);
  
  // Callbacks & checkValidity
  xres->do_callback();
  yres->do_callback();
}

void OtherEditor::get(FractalView& v) {
  // Don't do v=view, because there are other members
  // which aren't in the ViewEditor
  
  v._xres = static_cast<int>(_view._xres); 
  v._yres = static_cast<int>(_view._yres); 
  v._zres = static_cast<int>(_view._zres);
  v._phongmax = _view._phongmax;
  v._phongsharp = _view._phongsharp;
  v._ambient = _view._ambient; 
  v._antialiasing = static_cast<int>(_view._antialiasing);
}

void OtherEditor::checkValidity() {
  constexpr Fl_Color okc = FL_WHITE;
  constexpr Fl_Color ndefc = FL_RED;
  Fl_Color xres_c = okc, yres_c = okc, zres_c = okc,
  	pm_c = okc, ps_c = okc, amb_c = okc, ant_c = okc;
  
  if (_view._xres < 1 || _view._xres > 32767) {
      xres_c = ndefc;
  }
  if (_view._yres < 1 || _view._yres > 32767) {
      yres_c = ndefc;
  }
  if (_view._zres < 1) {
      zres_c = ndefc;
  }
  
  if (_view._phongmax < 0.0 || _view._phongmax > 1.0) {
      pm_c = ndefc;
  }
  if (_view._phongsharp < 0.0) ps_c = ndefc;
  
  if (_view._ambient < 0.0 || _view._ambient >1.0) amb_c = ndefc;
  if (_view._antialiasing < 1 || _view._antialiasing > 5) ant_c = ndefc;
  
  if (xres->color() != xres_c) { xres->color(xres_c); xres->redraw(); }
  if (yres->color() != yres_c) { yres->color(yres_c); yres->redraw(); }
  if (zres->color() != zres_c) { zres->color(zres_c); zres->redraw(); }
  if (phongmax->color() != pm_c) { phongmax->color(pm_c); phongmax->redraw(); }
  if (phongsharp->color() != ps_c) { phongsharp->color(ps_c); phongsharp->redraw(); }
  if (ambient->color() != amb_c) { ambient->color(amb_c); ambient->redraw(); }
  if (antialiasing->color() != ant_c) { antialiasing->color(ant_c); antialiasing->redraw(); }
}
